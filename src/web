# Prototipo Web: Módulo de Generación Rítmica

## Instrucciones

1. Crea un proyecto React:
   ```bash
   npx create-react-app profesor-de-ritmo
   cd profesor-de-ritmo
   ```

2. Instala dependencias:
   ```bash
   npm install vexflow tone tailwindcss
   ```

3. Configura Tailwind CSS:
   - Crea `tailwind.config.js`:
     ```javascript
     module.exports = {
       content: ["./src/**/*.{js,jsx,ts,tsx}"],
       theme: { extend: {} },
       plugins: [],
     };
     ```
   - Actualiza `src/index.css`:
     ```css
     @tailwind base;
     @tailwind components;
     @tailwind utilities;
     ```

4. Crea el componente principal en `src/App.js`:
   ```javascript
   import React, { useEffect, useRef } from 'react';
   import * as Vex from 'vexflow';
   import * as Tone from 'tone';
   import './App.css';

   const App = () => {
     const canvasRef = useRef(null);

     // Generar un ritmo simple (4/4, 4 negras)
     const generateRhythm = () => {
       return [
         { duration: 'q', note: 'c/4' }, // Negra
         { duration: 'q', note: 'c/4' },
         { duration: 'q', note: 'c/4' },
         { duration: 'q', note: 'c/4' },
       ];
     };

     // Renderizar partitura con VexFlow
     useEffect(() => {
       const VF = Vex.Flow;
       const canvas = canvasRef.current;
       const renderer = new VF.Renderer(canvas, VF.Renderer.Backends.CANVAS);
       renderer.resize(400, 200);
       const context = renderer.getContext();
       context.setFillStyle('#000').setStrokeStyle('#000');

       const stave = new VF.Stave(10, 40, 380);
       stave.addClef('treble').addTimeSignature('4/4');
       stave.setContext(context).draw();

       const notes = generateRhythm().map(({ duration }) =>
         new VF.StaveNote({ keys: ['c/4'], duration })
       );

       const voice = new VF.Voice({ num_beats: 4, beat_value: 4 });
       voice.addTickables(notes);
       new VF.Formatter().joinVoices([voice]).format([voice], 350);
       voice.draw(context, stave);
     }, []);

     // Reproducir ritmo con Tone.js
     const playRhythm = async () => {
       await Tone.start();
       const synth = new Tone.Synth().toDestination();
       const now = Tone.now();
       generateRhythm().forEach((_, index) => {
         synth.triggerAttackRelease('C4', '4n', now + index * 0.5);
       });
     };

     return (
       <div className="min-h-screen bg-gray-100 flex flex-col items-center justify-center p-4">
         <h1 className="text-3xl font-bold mb-4">Profesor de Ritmo</h1>
         <canvas ref={canvasRef} className="border border-gray-300 mb-4"></canvas>
         <button
           onClick={playRhythm}
           className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
         >
           Reproducir Ritmo
         </button>
       </div>
     );
   };

   export default App;
   ```

5. Inicia la aplicación:
   ```bash
   npm start
   ```

## Descripción

- **Funcionalidad**: Genera un ritmo simple (4 negras en 4/4), muestra la partitura con VexFlow, y reproduce el ritmo con Tone.js.
- **Estructura**:
  - `generateRhythm`: Genera un arreglo de notas (por ahora, estático; se integrará con Music21 más adelante).
  - `useEffect`: Renderiza la partitura en un canvas.
  - `playRhythm`: Reproduce el ritmo como audio.
- **Interfaz**: Un lienzo para la partitura y un botón para reproducir el ritmo.

## Próximos Pasos

- Integrar Music21 (usando Pyodide) para generar ritmos dinámicos.
- Añadir un formulario para que el usuario seleccione compás, tempo, y nivel.
- Extender a otros módulos (dictado, teoría).
